{"id":"XKLx","dependencies":[{"name":"/home/qelso/dev/git-repos/will-it-miss/package.json","includedInParent":true,"mtime":1715094091542},{"name":"/home/qelso/dev/git-repos/will-it-miss/node_modules/date-fns/package.json","includedInParent":true,"mtime":1715091020293}],"generated":{"js":"\"use strict\";function t(t,n){return t instanceof Date?new t.constructor(n):new Date(n)}exports.constructFrom=t;"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/date-fns/constructFrom.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/date-fns/constructFrom.js","original":{"line":34,"column":0},"generated":{"line":1,"column":13}},{"source":"../node_modules/date-fns/constructFrom.js","original":{"line":34,"column":0},"generated":{"line":1,"column":22}},{"source":"../node_modules/date-fns/constructFrom.js","original":{"line":34,"column":0},"generated":{"line":1,"column":24}},{"source":"../node_modules/date-fns/constructFrom.js","original":{"line":34,"column":0},"generated":{"line":1,"column":26}},{"source":"../node_modules/date-fns/constructFrom.js","original":{"line":35,"column":0},"generated":{"line":1,"column":29}},{"source":"../node_modules/date-fns/constructFrom.js","original":{"line":35,"column":0},"generated":{"line":1,"column":36}},{"source":"../node_modules/date-fns/constructFrom.js","original":{"line":35,"column":0},"generated":{"line":1,"column":49}},{"source":"../node_modules/date-fns/constructFrom.js","original":{"line":36,"column":0},"generated":{"line":1,"column":54}},{"source":"../node_modules/date-fns/constructFrom.js","original":{"line":36,"column":0},"generated":{"line":1,"column":58}},{"source":"../node_modules/date-fns/constructFrom.js","original":{"line":36,"column":0},"generated":{"line":1,"column":60}},{"source":"../node_modules/date-fns/constructFrom.js","original":{"line":36,"column":0},"generated":{"line":1,"column":72}},{"source":"../node_modules/date-fns/constructFrom.js","original":{"line":38,"column":0},"generated":{"line":1,"column":75}},{"source":"../node_modules/date-fns/constructFrom.js","original":{"line":38,"column":0},"generated":{"line":1,"column":79}},{"source":"../node_modules/date-fns/constructFrom.js","original":{"line":38,"column":0},"generated":{"line":1,"column":84}},{"source":"../node_modules/date-fns/constructFrom.js","original":{"line":2,"column":0},"generated":{"line":1,"column":87}},{"source":"../node_modules/date-fns/constructFrom.js","original":{"line":2,"column":0},"generated":{"line":1,"column":95}},{"source":"../node_modules/date-fns/constructFrom.js","original":{"line":2,"column":0},"generated":{"line":1,"column":109}}],"sources":{"../node_modules/date-fns/constructFrom.js":"\"use strict\";\nexports.constructFrom = constructFrom;\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from 'date-fns'\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use contrustor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   )\n * }\n */\nfunction constructFrom(date, value) {\n  if (date instanceof Date) {\n    return new date.constructor(value);\n  } else {\n    return new Date(value);\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"a10bc24b433e1173500e34bdb9852036","cacheData":{"env":{}}}